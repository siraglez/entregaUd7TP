Algoritmo principal:

    Crear un GestorProductos
    Agregar algunos productos (por ejemplo, libros) al catálogo del GestorProductos

    Mostrar el catálogo de productos usando el método obtenerCatalogo del GestorProductos

    Crear un Cliente

    Simular una compra:
        Obtener un producto del catálogo del GestorProductos
        Agregar el producto al historial de compras del Cliente

    Obtener recomendaciones personalizadas para el Cliente:
        Implementar un algoritmo de recomendación basado en su historial de compras y preferencias
        Mostrar las recomendaciones en la consola

Fin del algoritmo principal

Clase Cliente:
    Atributos:
        nombre: cadena de texto
        historialCompras: lista de Productos

    Métodos:
        Constructor(nombre: cadena de texto): inicializa el Cliente con un nombre dado
        obtenerRecomendaciones(): método para obtener recomendaciones personalizadas basadas en el historial de compras
        agregarCompra(producto: Producto): método para agregar una compra al historial

Clase Productos:
    Atributos:
        nombre: cadena de texto
        precio: número decimal

    Método abstracto:
        getTipo(): método abstracto que debe ser implementado por las clases que heredan de Productos

Clase Libro hereda de Productos:
    Atributos:
        autor: cadena de texto

    Método:
        getTipo(): implementación del método abstracto de Productos para obtener el tipo (en este caso, "Libro")

Interfaz ProductosInterfaz:
    Método:
        obtenerCatalogo(): método que debe ser implementado por las clases que deseen proporcionar un catálogo de productos

Clase GestorProductos implementa ProductosInterfaz:
    Atributos:
        catalogo: lista de Productos

    Métodos:
        Constructor(): inicializa el GestorProductos con un catálogo vacío
        agregarProducto(producto: Producto): método para agregar un producto al catálogo
        obtenerCatalogo(): implementación del método de la interfaz para obtener el catálogo
